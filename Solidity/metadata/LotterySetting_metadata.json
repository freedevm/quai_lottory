"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRY_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAIN_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_JACKPOT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MEGA_JACKPOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEGA_JACKPOT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_JACKPOT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RANDOM_TEN_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_SHARE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpotSizeLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryPrice\",\"type\":\"uint256\"}],\"name\":\"setEntryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minJackpotSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxJackpotSize\",\"type\":\"uint256\"}],\"name\":\"setJackpotSizeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMegaJackpot\",\"type\":\"uint256\"}],\"name\":\"setMaxMegaJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_megaJackpotFee\",\"type\":\"uint256\"}],\"name\":\"setMegaJackpotFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mainRewardPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randomTenRewardPercent\",\"type\":\"uint256\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamSharePercent\",\"type\":\"uint256\"}],\"name\":\"setTeamSharePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotterySetting.sol\":\"LotterySetting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/LotterySetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LotterySetting is Ownable {\\n    uint256 public constant SCALE = 10000;\\n\\n    // Fee-related settings\\n    uint256 public TAX_PERCENT = 1000; // 10% of prize pool\\n    uint256 public MEGA_JACKPOT_FEE = 5000; // 50% of tax\\n    uint256 public MAIN_REWARD_PERCENT = 8000; // 80% of prize pool\\n    uint256 public RANDOM_TEN_REWARD_PERCENT = 1000; // 10% of prize pool\\n    uint256 public TEAM_SHARE_PERCENT = 5000; // 50% of tax\\n\\n    // Game settings\\n    uint256 public ENTRY_PRICE = 0.05 ether;\\n    uint256 public MIN_JACKPOT_SIZE = 1 ether;\\n    uint256 public MAX_JACKPOT_SIZE = 10 ether;\\n    uint256 public MAX_MEGA_JACKPOT = 100 ether;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // Combined setter for tax, main reward, and random ten reward percentages\\n    function setRewardDistribution(\\n        uint256 _taxPercent,\\n        uint256 _mainRewardPercent,\\n        uint256 _randomTenRewardPercent\\n    ) external onlyOwner {\\n        require(_taxPercent <= SCALE, \\\"Tax percent cannot exceed 100%\\\");\\n        require(_mainRewardPercent <= SCALE, \\\"Main reward percent cannot exceed 100%\\\");\\n        require(_randomTenRewardPercent <= SCALE, \\\"Random Ten reward percent cannot exceed 100%\\\");\\n        require(\\n            _taxPercent + _mainRewardPercent + _randomTenRewardPercent <= SCALE,\\n            \\\"Tax + Main + Random Ten cannot exceed 100%\\\"\\n        );\\n\\n        TAX_PERCENT = _taxPercent;\\n        MAIN_REWARD_PERCENT = _mainRewardPercent;\\n        RANDOM_TEN_REWARD_PERCENT = _randomTenRewardPercent;\\n    }\\n\\n    // Setter functions for other fee-related settings\\n    function setMegaJackpotFee(uint256 _megaJackpotFee) external onlyOwner {\\n        require(_megaJackpotFee <= SCALE, \\\"Mega Jackpot fee cannot exceed 100%\\\");\\n        MEGA_JACKPOT_FEE = _megaJackpotFee;\\n    }\\n\\n    function setTeamSharePercent(uint256 _teamSharePercent) external onlyOwner {\\n        require(_teamSharePercent <= SCALE, \\\"Team share percent cannot exceed 100%\\\");\\n        TEAM_SHARE_PERCENT = _teamSharePercent;\\n    }\\n\\n    // Setter functions for game settings\\n    function setEntryPrice(uint256 _entryPrice) external onlyOwner {\\n        require(_entryPrice > 0, \\\"Entry price must be greater than 0\\\");\\n        ENTRY_PRICE = _entryPrice;\\n    }\\n\\n    function setJackpotSizeLimits(uint256 _minJackpotSize, uint256 _maxJackpotSize) external onlyOwner {\\n        require(_minJackpotSize > 0, \\\"Min jackpot size must be greater than 0\\\");\\n        require(_maxJackpotSize >= _minJackpotSize, \\\"Max must be >= min\\\");\\n        MIN_JACKPOT_SIZE = _minJackpotSize;\\n        MAX_JACKPOT_SIZE = _maxJackpotSize;\\n    }\\n\\n    function setMaxMegaJackpot(uint256 _maxMegaJackpot) external onlyOwner {\\n        require(_maxMegaJackpot > 0, \\\"Max Mega Jackpot must be greater than 0\\\");\\n        MAX_MEGA_JACKPOT = _maxMegaJackpot;\\n    }\\n\\n    // Getter function for jackpot size limits\\n    function getJackpotSizeLimits() external view returns (uint256, uint256) {\\n        return (MIN_JACKPOT_SIZE, MAX_JACKPOT_SIZE);\\n    }\\n}\",\"keccak256\":\"0x61d8a8374deb7d8099faa0b53dc24a0e1014cb7f8aa2c7b0deb8148eadd94495\",\"license\":\"MIT\"}},\"version\":1}"