{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_nftContract","type":"address"},{"internalType":"address","name":"_settingContract","type":"address"},{"internalType":"address","name":"_teamWallet","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameIndex","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"GameEnded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameIndex","type":"uint256"}],"name":"GameStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameIndex","type":"uint256"},{"indexed":false,"internalType":"enum LotteryGame.GameState","name":"state","type":"uint8"}],"name":"GameStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameIndex","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"GameWinners","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameIndex","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"contribution","type":"uint256"}],"name":"MegaJackpotContribution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"MegaJackpotWon","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"gameIndex","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"tickets","type":"uint256"}],"name":"TicketPurchased","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"activeGameIndices","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gameIndex","type":"uint256"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"counts","type":"uint256[]"},{"internalType":"uint256","name":"userRandom","type":"uint256"}],"name":"buyTickets","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"gameCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"games","outputs":[{"internalType":"enum LotteryGame.GameState","name":"state","type":"uint8"},{"internalType":"uint256","name":"jackpotSize","type":"uint256"},{"internalType":"uint256","name":"currentSize","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getActiveGameIndices","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gameIndex","type":"uint256"}],"name":"getGameCurrentSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInvestorList","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gameIndex","type":"uint256"},{"internalType":"address","name":"player","type":"address"}],"name":"getPlayerEntry","outputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"counts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gameIndex","type":"uint256"},{"internalType":"address","name":"player","type":"address"}],"name":"getTickets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"investorList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"megaJackpot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nftContract","outputs":[{"internalType":"contract LotteryGameNFTCard","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"refreshMegaJackpot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"gameIndex","type":"uint256"}],"name":"reward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_teamwallet","type":"address"}],"name":"setTeamWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"setting","outputs":[{"internalType":"contract LotterySetting","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"jackpotSize","type":"uint256"}],"name":"startGame","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"teamWallet","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"totalUserTicket","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"buyTickets(uint256,uint256[],uint256[],uint256)":{"details":"Allows users to buy tickets for a game using NFTs for a boost.","params":{"counts":"Array of counts corresponding to each token ID (number of tokens to use).","gameIndex":"The index of the game to participate in.","tokenIds":"Array of token IDs (card types) to use for the boost.","userRandom":"A user-provided random number to contribute to randomness."}},"constructor":{"details":"Constructor to initialize the LotteryGame contract.","params":{"_nftContract":"Address of the LotteryGameNFTCard contract (ERC-1155).","_settingContract":"Address of the LotterySetting contract for configuration.","_teamWallet":"Address of the team/treasury wallet to receive team share."}},"emergencyWithdraw()":{"details":"Admin function to withdraw all funds in case of an emergency."},"getActiveGameIndices()":{"details":"View function to get the indices of active games.","returns":{"_0":"An array of active game indices."}},"getGameCurrentSize(uint256)":{"details":"View function to get the current size (total ETH collected) of a game.","params":{"gameIndex":"The index of the game."},"returns":{"_0":"The current size of the game in wei."}},"getInvestorList()":{"details":"View function to get the list of investors across all games.","returns":{"_0":"An array of investor addresses."}},"getPlayerEntry(uint256,address)":{"details":"View function to get a player's entry details (NFTs used) in a game.","params":{"gameIndex":"The index of the game.","player":"The address of the player."},"returns":{"counts":"Array of counts corresponding to each token ID.","tokenIds":"Array of token IDs used by the player."}},"getTickets(uint256,address)":{"details":"View function to get the number of tickets a player has in a game.","params":{"gameIndex":"The index of the game.","player":"The address of the player."},"returns":{"_0":"The number of tickets the player has."}},"owner()":{"details":"Returns the address of the current owner."},"refreshMegaJackpot()":{"details":"Admin function to refresh the Mega Jackpot and distribute the reward."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"reward(uint256)":{"details":"Admin function to trigger reward calculation and distribution for a game.","params":{"gameIndex":"The index of the game to reward."}},"setTeamWallet(address)":{"details":"Admin function to set teamwallet address."},"startGame(uint256)":{"details":"Admin function to start a new game.","params":{"jackpotSize":"The target jackpot size for the game in wei."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/LotteryGame.sol":"LotteryGame"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)nnpragma solidity ^0.8.20;nnimport {Context} from "../utils/Context.sol";nn/**n * @dev Contract module which provides a basic access control mechanism, wheren * there is an account (an owner) that can be granted exclusive access ton * specific functions.n *n * The initial owner is set to the address provided by the deployer. This cann * later be changed with {transferOwnership}.n *n * This module is used through inheritance. It will make available the modifiern * `onlyOwner`, which can be applied to your functions to restrict their use ton * the owner.n */nabstract contract Ownable is Context {n    address private _owner;nn    /**n     * @dev The caller account is not authorized to perform an operation.n     */n    error OwnableUnauthorizedAccount(address account);nn    /**n     * @dev The owner is not a valid owner account. (eg. `address(0)`)n     */n    error OwnableInvalidOwner(address owner);nn    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);nn    /**n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.n     */n    constructor(address initialOwner) {n        if (initialOwner == address(0)) {n            revert OwnableInvalidOwner(address(0));n        }n        _transferOwnership(initialOwner);n    }nn    /**n     * @dev Throws if called by any account other than the owner.n     */n    modifier onlyOwner() {n        _checkOwner();n        _;n    }nn    /**n     * @dev Returns the address of the current owner.n     */n    function owner() public view virtual returns (address) {n        return _owner;n    }nn    /**n     * @dev Throws if the sender is not the owner.n     */n    function _checkOwner() internal view virtual {n        if (owner() != _msgSender()) {n            revert OwnableUnauthorizedAccount(_msgSender());n        }n    }nn    /**n     * @dev Leaves the contract without owner. It will not be possible to calln     * `onlyOwner` functions. Can only be called by the current owner.n     *n     * NOTE: Renouncing ownership will leave the contract without an owner,n     * thereby disabling any functionality that is only available to the owner.n     */n    function renounceOwnership() public virtual onlyOwner {n        _transferOwnership(address(0));n    }nn    /**n     * @dev Transfers ownership of the contract to a new account (`newOwner`).n     * Can only be called by the current owner.n     */n    function transferOwnership(address newOwner) public virtual onlyOwner {n        if (newOwner == address(0)) {n            revert OwnableInvalidOwner(address(0));n        }n        _transferOwnership(newOwner);n    }nn    /**n     * @dev Transfers ownership of the contract to a new account (`newOwner`).n     * Internal function without access restriction.n     */n    function _transferOwnership(address newOwner) internal virtual {n        address oldOwner = _owner;n        _owner = newOwner;n        emit OwnershipTransferred(oldOwner, newOwner);n    }n}n","keccak256":"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb","license":"MIT"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)npragma solidity ^0.8.20;nn/**n * @dev Standard ERC20 Errorsn * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.n */ninterface IERC20Errors {n    /**n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.n     * @param sender Address whose tokens are being transferred.n     * @param balance Current balance for the interacting account.n     * @param needed Minimum amount required to perform a transfer.n     */n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);nn    /**n     * @dev Indicates a failure with the token `sender`. Used in transfers.n     * @param sender Address whose tokens are being transferred.n     */n    error ERC20InvalidSender(address sender);nn    /**n     * @dev Indicates a failure with the token `receiver`. Used in transfers.n     * @param receiver Address to which tokens are being transferred.n     */n    error ERC20InvalidReceiver(address receiver);nn    /**n     * @dev Indicates a failure with the `spender`u2019s `allowance`. Used in transfers.n     * @param spender Address that may be allowed to operate on tokens without being their owner.n     * @param allowance Amount of tokens a `spender` is allowed to operate with.n     * @param needed Minimum amount required to perform a transfer.n     */n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);nn    /**n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.n     * @param approver Address initiating an approval operation.n     */n    error ERC20InvalidApprover(address approver);nn    /**n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.n     * @param spender Address that may be allowed to operate on tokens without being their owner.n     */n    error ERC20InvalidSpender(address spender);n}nn/**n * @dev Standard ERC721 Errorsn * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.n */ninterface IERC721Errors {n    /**n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.n     * Used in balance queries.n     * @param owner Address of the current owner of a token.n     */n    error ERC721InvalidOwner(address owner);nn    /**n     * @dev Indicates a `tokenId` whose `owner` is the zero address.n     * @param tokenId Identifier number of a token.n     */n    error ERC721NonexistentToken(uint256 tokenId);nn    /**n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.n     * @param sender Address whose tokens are being transferred.n     * @param tokenId Identifier number of a token.n     * @param owner Address of the current owner of a token.n     */n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);nn    /**n     * @dev Indicates a failure with the token `sender`. Used in transfers.n     * @param sender Address whose tokens are being transferred.n     */n    error ERC721InvalidSender(address sender);nn    /**n     * @dev Indicates a failure with the token `receiver`. Used in transfers.n     * @param receiver Address to which tokens are being transferred.n     */n    error ERC721InvalidReceiver(address receiver);nn    /**n     * @dev Indicates a failure with the `operator`u2019s approval. Used in transfers.n     * @param operator Address that may be allowed to operate on tokens without being their owner.n     * @param tokenId Identifier number of a token.n     */n    error ERC721InsufficientApproval(address operator, uint256 tokenId);nn    /**n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.n     * @param approver Address initiating an approval operation.n     */n    error ERC721InvalidApprover(address approver);nn    /**n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.n     * @param operator Address that may be allowed to operate on tokens without being their owner.n     */n    error ERC721InvalidOperator(address operator);n}nn/**n * @dev Standard ERC1155 Errorsn * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.n */ninterface IERC1155Errors {n    /**n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.n     * @param sender Address whose tokens are being transferred.n     * @param balance Current balance for the interacting account.n     * @param needed Minimum amount required to perform a transfer.n     * @param tokenId Identifier number of a token.n     */n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);nn    /**n     * @dev Indicates a failure with the token `sender`. Used in transfers.n     * @param sender Address whose tokens are being transferred.n     */n    error ERC1155InvalidSender(address sender);nn    /**n     * @dev Indicates a failure with the token `receiver`. Used in transfers.n     * @param receiver Address to which tokens are being transferred.n     */n    error ERC1155InvalidReceiver(address receiver);nn    /**n     * @dev Indicates a failure with the `operator`u2019s approval. Used in transfers.n     * @param operator Address that may be allowed to operate on tokens without being their owner.n     * @param owner Address of the current owner of a token.n     */n    error ERC1155MissingApprovalForAll(address operator, address owner);nn    /**n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.n     * @param approver Address initiating an approval operation.n     */n    error ERC1155InvalidApprover(address approver);nn    /**n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.n     * @param operator Address that may be allowed to operate on tokens without being their owner.n     */n    error ERC1155InvalidOperator(address operator);nn    /**n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.n     * Used in batch transfers.n     * @param idsLength Length of the array of token identifiersn     * @param valuesLength Length of the array of token amountsn     */n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);n}n","keccak256":"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)nnpragma solidity ^0.8.20;nnimport {IERC1155} from "./IERC1155.sol";nimport {IERC1155Receiver} from "./IERC1155Receiver.sol";nimport {IERC1155MetadataURI} from "./extensions/IERC1155MetadataURI.sol";nimport {Context} from "../../utils/Context.sol";nimport {IERC165, ERC165} from "../../utils/introspection/ERC165.sol";nimport {Arrays} from "../../utils/Arrays.sol";nimport {IERC1155Errors} from "../../interfaces/draft-IERC6093.sol";nn/**n * @dev Implementation of the basic standard multi-token.n * See https://eips.ethereum.org/EIPS/eip-1155n * Originally based on code by Enjin: https://github.com/enjin/erc-1155n */nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {n    using Arrays for uint256[];n    using Arrays for address[];nn    mapping(uint256 id => mapping(address account => uint256)) private _balances;nn    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;nn    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.jsonn    string private _uri;nn    /**n     * @dev See {_setURI}.n     */n    constructor(string memory uri_) {n        _setURI(uri_);n    }nn    /**n     * @dev See {IERC165-supportsInterface}.n     */n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {n        returnn            interfaceId == type(IERC1155).interfaceId ||n            interfaceId == type(IERC1155MetadataURI).interfaceId ||n            super.supportsInterface(interfaceId);n    }nn    /**n     * @dev See {IERC1155MetadataURI-uri}.n     *n     * This implementation returns the same URI for *all* token types. It reliesn     * on the token type ID substitution mechanismn     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].n     *n     * Clients calling this function must replace the `{id}` substring with then     * actual token type ID.n     */n    function uri(uint256 /* id */) public view virtual returns (string memory) {n        return _uri;n    }nn    /**n     * @dev See {IERC1155-balanceOf}.n     */n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {n        return _balances[id][account];n    }nn    /**n     * @dev See {IERC1155-balanceOfBatch}.n     *n     * Requirements:n     *n     * - `accounts` and `ids` must have the same length.n     */n    function balanceOfBatch(n        address[] memory accounts,n        uint256[] memory idsn    ) public view virtual returns (uint256[] memory) {n        if (accounts.length != ids.length) {n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);n        }nn        uint256[] memory batchBalances = new uint256[](accounts.length);nn        for (uint256 i = 0; i < accounts.length; ++i) {n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));n        }nn        return batchBalances;n    }nn    /**n     * @dev See {IERC1155-setApprovalForAll}.n     */n    function setApprovalForAll(address operator, bool approved) public virtual {n        _setApprovalForAll(_msgSender(), operator, approved);n    }nn    /**n     * @dev See {IERC1155-isApprovedForAll}.n     */n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {n        return _operatorApprovals[account][operator];n    }nn    /**n     * @dev See {IERC1155-safeTransferFrom}.n     */n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {n        address sender = _msgSender();n        if (from != sender && !isApprovedForAll(from, sender)) {n            revert ERC1155MissingApprovalForAll(sender, from);n        }n        _safeTransferFrom(from, to, id, value, data);n    }nn    /**n     * @dev See {IERC1155-safeBatchTransferFrom}.n     */n    function safeBatchTransferFrom(n        address from,n        address to,n        uint256[] memory ids,n        uint256[] memory values,n        bytes memory datan    ) public virtual {n        address sender = _msgSender();n        if (from != sender && !isApprovedForAll(from, sender)) {n            revert ERC1155MissingApprovalForAll(sender, from);n        }n        _safeBatchTransferFrom(from, to, ids, values, data);n    }nn    /**n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`n     * (or `to`) is the zero address.n     *n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.n     *n     * Requirements:n     *n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.n     * - `ids` and `values` must have the same length.n     *n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.n     */n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {n        if (ids.length != values.length) {n            revert ERC1155InvalidArrayLength(ids.length, values.length);n        }nn        address operator = _msgSender();nn        for (uint256 i = 0; i < ids.length; ++i) {n            uint256 id = ids.unsafeMemoryAccess(i);n            uint256 value = values.unsafeMemoryAccess(i);nn            if (from != address(0)) {n                uint256 fromBalance = _balances[id][from];n                if (fromBalance < value) {n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);n                }n                unchecked {n                    // Overflow not possible: value <= fromBalancen                    _balances[id][from] = fromBalance - value;n                }n            }nn            if (to != address(0)) {n                _balances[id][to] += value;n            }n        }nn        if (ids.length == 1) {n            uint256 id = ids.unsafeMemoryAccess(0);n            uint256 value = values.unsafeMemoryAccess(0);n            emit TransferSingle(operator, from, to, id, value);n        } else {n            emit TransferBatch(operator, from, to, ids, values);n        }n    }nn    /**n     * @dev Version of {_update} that performs the token acceptance check by callingn     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if itn     * contains code (eg. is a smart contract at the moment of execution).n     *n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So anyn     * update to the contract state after this function would break the check-effect-interaction pattern. Considern     * overriding {_update} instead.n     */n    function _updateWithAcceptanceCheck(n        address from,n        address to,n        uint256[] memory ids,n        uint256[] memory values,n        bytes memory datan    ) internal virtual {n        _update(from, to, ids, values);n        if (to != address(0)) {n            address operator = _msgSender();n            if (ids.length == 1) {n                uint256 id = ids.unsafeMemoryAccess(0);n                uint256 value = values.unsafeMemoryAccess(0);n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);n            } else {n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);n            }n        }n    }nn    /**n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.n     *n     * Emits a {TransferSingle} event.n     *n     * Requirements:n     *n     * - `to` cannot be the zero address.n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return then     * acceptance magic value.n     */n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {n        if (to == address(0)) {n            revert ERC1155InvalidReceiver(address(0));n        }n        if (from == address(0)) {n            revert ERC1155InvalidSender(address(0));n        }n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);n        _updateWithAcceptanceCheck(from, to, ids, values, data);n    }nn    /**n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.n     *n     * Emits a {TransferBatch} event.n     *n     * Requirements:n     *n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return then     * acceptance magic value.n     * - `ids` and `values` must have the same length.n     */n    function _safeBatchTransferFrom(n        address from,n        address to,n        uint256[] memory ids,n        uint256[] memory values,n        bytes memory datan    ) internal {n        if (to == address(0)) {n            revert ERC1155InvalidReceiver(address(0));n        }n        if (from == address(0)) {n            revert ERC1155InvalidSender(address(0));n        }n        _updateWithAcceptanceCheck(from, to, ids, values, data);n    }nn    /**n     * @dev Sets a new URI for all token types, by relying on the token type IDn     * substitution mechanismn     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].n     *n     * By this mechanism, any occurrence of the `{id}` substring in either then     * URI or any of the values in the JSON file at said URI will be replaced byn     * clients with the token type ID.n     *n     * For example, the `https://token-cdn-domain/{id}.json` URI would ben     * interpreted by clients asn     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`n     * for token type ID 0x4cce0.n     *n     * See {uri}.n     *n     * Because these URIs cannot be meaningfully represented by the {URI} event,n     * this function emits no events.n     */n    function _setURI(string memory newuri) internal virtual {n        _uri = newuri;n    }nn    /**n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.n     *n     * Emits a {TransferSingle} event.n     *n     * Requirements:n     *n     * - `to` cannot be the zero address.n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return then     * acceptance magic value.n     */n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {n        if (to == address(0)) {n            revert ERC1155InvalidReceiver(address(0));n        }n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);n    }nn    /**n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.n     *n     * Emits a {TransferBatch} event.n     *n     * Requirements:n     *n     * - `ids` and `values` must have the same length.n     * - `to` cannot be the zero address.n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return then     * acceptance magic value.n     */n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {n        if (to == address(0)) {n            revert ERC1155InvalidReceiver(address(0));n        }n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);n    }nn    /**n     * @dev Destroys a `value` amount of tokens of type `id` from `from`n     *n     * Emits a {TransferSingle} event.n     *n     * Requirements:n     *n     * - `from` cannot be the zero address.n     * - `from` must have at least `value` amount of tokens of type `id`.n     */n    function _burn(address from, uint256 id, uint256 value) internal {n        if (from == address(0)) {n            revert ERC1155InvalidSender(address(0));n        }n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);n        _updateWithAcceptanceCheck(from, address(0), ids, values, "");n    }nn    /**n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.n     *n     * Emits a {TransferBatch} event.n     *n     * Requirements:n     *n     * - `from` cannot be the zero address.n     * - `from` must have at least `value` amount of tokens of type `id`.n     * - `ids` and `values` must have the same length.n     */n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {n        if (from == address(0)) {n            revert ERC1155InvalidSender(address(0));n        }n        _updateWithAcceptanceCheck(from, address(0), ids, values, "");n    }nn    /**n     * @dev Approve `operator` to operate on all of `owner` tokensn     *n     * Emits an {ApprovalForAll} event.n     *n     * Requirements:n     *n     * - `operator` cannot be the zero address.n     */n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {n        if (operator == address(0)) {n            revert ERC1155InvalidOperator(address(0));n        }n        _operatorApprovals[owner][operator] = approved;n        emit ApprovalForAll(owner, operator, approved);n    }nn    /**n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` addressn     * if it contains code at the moment of execution.n     */n    function _doSafeTransferAcceptanceCheck(n        address operator,n        address from,n        address to,n        uint256 id,n        uint256 value,n        bytes memory datan    ) private {n        if (to.code.length > 0) {n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {n                if (response != IERC1155Receiver.onERC1155Received.selector) {n                    // Tokens rejectedn                    revert ERC1155InvalidReceiver(to);n                }n            } catch (bytes memory reason) {n                if (reason.length == 0) {n                    // non-ERC1155Receiver implementern                    revert ERC1155InvalidReceiver(to);n                } else {n                    /// @solidity memory-safe-assemblyn                    assembly {n                        revert(add(32, reason), mload(reason))n                    }n                }n            }n        }n    }nn    /**n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` addressn     * if it contains code at the moment of execution.n     */n    function _doSafeBatchTransferAcceptanceCheck(n        address operator,n        address from,n        address to,n        uint256[] memory ids,n        uint256[] memory values,n        bytes memory datan    ) private {n        if (to.code.length > 0) {n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (n                bytes4 responsen            ) {n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {n                    // Tokens rejectedn                    revert ERC1155InvalidReceiver(to);n                }n            } catch (bytes memory reason) {n                if (reason.length == 0) {n                    // non-ERC1155Receiver implementern                    revert ERC1155InvalidReceiver(to);n                } else {n                    /// @solidity memory-safe-assemblyn                    assembly {n                        revert(add(32, reason), mload(reason))n                    }n                }n            }n        }n    }nn    /**n     * @dev Creates an array in memory with only one value for each of the elements provided.n     */n    function _asSingletonArrays(n        uint256 element1,n        uint256 element2n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {n        /// @solidity memory-safe-assemblyn        assembly {n            // Load the free memory pointern            array1 := mload(0x40)n            // Set array length to 1n            mstore(array1, 1)n            // Store the single element at the next word after the length (where content starts)n            mstore(add(array1, 0x20), element1)nn            // Repeat for next array locating it right after the first arrayn            array2 := add(array1, 0x40)n            mstore(array2, 1)n            mstore(add(array2, 0x20), element2)nn            // Update the free memory pointer by pointing after the second arrayn            mstore(0x40, add(array2, 0x40))n        }n    }n}n","keccak256":"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)nnpragma solidity ^0.8.20;nnimport {IERC165} from "../../utils/introspection/IERC165.sol";nn/**n * @dev Required interface of an ERC1155 compliant contract, as defined in then * https://eips.ethereum.org/EIPS/eip-1155[EIP].n */ninterface IERC1155 is IERC165 {n    /**n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.n     */n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);nn    /**n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for alln     * transfers.n     */n    event TransferBatch(n        address indexed operator,n        address indexed from,n        address indexed to,n        uint256[] ids,n        uint256[] valuesn    );nn    /**n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according ton     * `approved`.n     */n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);nn    /**n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.n     *n     * If an {URI} event was emitted for `id`, the standardn     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the valuen     * returned by {IERC1155MetadataURI-uri}.n     */n    event URI(string value, uint256 indexed id);nn    /**n     * @dev Returns the value of tokens of token type `id` owned by `account`.n     *n     * Requirements:n     *n     * - `account` cannot be the zero address.n     */n    function balanceOf(address account, uint256 id) external view returns (uint256);nn    /**n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.n     *n     * Requirements:n     *n     * - `accounts` and `ids` must have the same length.n     */n    function balanceOfBatch(n        address[] calldata accounts,n        uint256[] calldata idsn    ) external view returns (uint256[] memory);nn    /**n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,n     *n     * Emits an {ApprovalForAll} event.n     *n     * Requirements:n     *n     * - `operator` cannot be the caller.n     */n    function setApprovalForAll(address operator, bool approved) external;nn    /**n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.n     *n     * See {setApprovalForAll}.n     */n    function isApprovedForAll(address account, address operator) external view returns (bool);nn    /**n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.n     *n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokensn     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.n     * Ensure to follow the checks-effects-interactions pattern and consider employingn     * reentrancy guards when interacting with untrusted contracts.n     *n     * Emits a {TransferSingle} event.n     *n     * Requirements:n     *n     * - `to` cannot be the zero address.n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return then     * acceptance magic value.n     */n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;nn    /**n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.n     *n     *n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokensn     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.n     * Ensure to follow the checks-effects-interactions pattern and consider employingn     * reentrancy guards when interacting with untrusted contracts.n     *n     * Emits a {TransferBatch} event.n     *n     * Requirements:n     *n     * - `ids` and `values` must have the same length.n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return then     * acceptance magic value.n     */n    function safeBatchTransferFrom(n        address from,n        address to,n        uint256[] calldata ids,n        uint256[] calldata values,n        bytes calldata datan    ) external;n}n","keccak256":"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)nnpragma solidity ^0.8.20;nnimport {IERC165} from "../../utils/introspection/IERC165.sol";nn/**n * @dev Interface that must be implemented by smart contracts in order to receiven * ERC-1155 token transfers.n */ninterface IERC1155Receiver is IERC165 {n    /**n     * @dev Handles the receipt of a single ERC1155 token type. This function isn     * called at the end of a `safeTransferFrom` after the balance has been updated.n     *n     * NOTE: To accept the transfer, this must returnn     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`n     * (i.e. 0xf23a6e61, or its own function selector).n     *n     * @param operator The address which initiated the transfer (i.e. msg.sender)n     * @param from The address which previously owned the tokenn     * @param id The ID of the token being transferredn     * @param value The amount of tokens being transferredn     * @param data Additional data with no specified formatn     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowedn     */n    function onERC1155Received(n        address operator,n        address from,n        uint256 id,n        uint256 value,n        bytes calldata datan    ) external returns (bytes4);nn    /**n     * @dev Handles the receipt of a multiple ERC1155 token types. This functionn     * is called at the end of a `safeBatchTransferFrom` after the balances haven     * been updated.n     *n     * NOTE: To accept the transfer(s), this must returnn     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`n     * (i.e. 0xbc197c81, or its own function selector).n     *n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)n     * @param from The address which previously owned the tokenn     * @param ids An array containing ids of each token being transferred (order and length must match values array)n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)n     * @param data Additional data with no specified formatn     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowedn     */n    function onERC1155BatchReceived(n        address operator,n        address from,n        uint256[] calldata ids,n        uint256[] calldata values,n        bytes calldata datan    ) external returns (bytes4);n}n","keccak256":"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)nnpragma solidity ^0.8.20;nnimport {IERC1155} from "../IERC1155.sol";nn/**n * @dev Interface of the optional ERC1155MetadataExtension interface, as definedn * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].n */ninterface IERC1155MetadataURI is IERC1155 {n    /**n     * @dev Returns the URI for token type `id`.n     *n     * If the `{id}` substring is present in the URI, it must be replaced byn     * clients with the actual token type ID.n     */n    function uri(uint256 id) external view returns (string memory);n}n","keccak256":"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68","license":"MIT"},"@openzeppelin/contracts/utils/Arrays.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)nnpragma solidity ^0.8.20;nnimport {StorageSlot} from "./StorageSlot.sol";nimport {Math} from "./math/Math.sol";nn/**n * @dev Collection of functions related to array types.n */nlibrary Arrays {n    using StorageSlot for bytes32;nn    /**n     * @dev Searches a sorted `array` and returns the first index that containsn     * a value greater or equal to `element`. If no such index exists (i.e. alln     * values in the array are strictly less than `element`), the array length isn     * returned. Time complexity O(log n).n     *n     * `array` is expected to be sorted in ascending order, and to contain non     * repeated elements.n     */n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {n        uint256 low = 0;n        uint256 high = array.length;nn        if (high == 0) {n            return 0;n        }nn        while (low < high) {n            uint256 mid = Math.average(low, high);nn            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)n            // because Math.average rounds towards zero (it does integer division with truncation).n            if (unsafeAccess(array, mid).value > element) {n                high = mid;n            } else {n                low = mid + 1;n            }n        }nn        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {n            return low - 1;n        } else {n            return low;n        }n    }nn    /**n     * @dev Access an array in an "unsafe" way. Skips solidity "index-out-of-range" check.n     *n     * WARNING: Only use if you are certain `pos` is lower than the array length.n     */n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {n        bytes32 slot;n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.nn        /// @solidity memory-safe-assemblyn        assembly {n            mstore(0, arr.slot)n            slot := add(keccak256(0, 0x20), pos)n        }n        return slot.getAddressSlot();n    }nn    /**n     * @dev Access an array in an "unsafe" way. Skips solidity "index-out-of-range" check.n     *n     * WARNING: Only use if you are certain `pos` is lower than the array length.n     */n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {n        bytes32 slot;n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.nn        /// @solidity memory-safe-assemblyn        assembly {n            mstore(0, arr.slot)n            slot := add(keccak256(0, 0x20), pos)n        }n        return slot.getBytes32Slot();n    }nn    /**n     * @dev Access an array in an "unsafe" way. Skips solidity "index-out-of-range" check.n     *n     * WARNING: Only use if you are certain `pos` is lower than the array length.n     */n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {n        bytes32 slot;n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.nn        /// @solidity memory-safe-assemblyn        assembly {n            mstore(0, arr.slot)n            slot := add(keccak256(0, 0x20), pos)n        }n        return slot.getUint256Slot();n    }nn    /**n     * @dev Access an array in an "unsafe" way. Skips solidity "index-out-of-range" check.n     *n     * WARNING: Only use if you are certain `pos` is lower than the array length.n     */n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {n        assembly {n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))n        }n    }nn    /**n     * @dev Access an array in an "unsafe" way. Skips solidity "index-out-of-range" check.n     *n     * WARNING: Only use if you are certain `pos` is lower than the array length.n     */n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {n        assembly {n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))n        }n    }n}n","keccak256":"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)nnpragma solidity ^0.8.20;nn/**n * @dev Provides information about the current execution context, including then * sender of the transaction and its data. While these are generally availablen * via msg.sender and msg.data, they should not be accessed in such a directn * manner, since when dealing with meta-transactions the account sending andn * paying for execution may not be the actual sender (as far as an applicationn * is concerned).n *n * This contract is only required for intermediate, library-like contracts.n */nabstract contract Context {n    function _msgSender() internal view virtual returns (address) {n        return msg.sender;n    }nn    function _msgData() internal view virtual returns (bytes calldata) {n        return msg.data;n    }n}n","keccak256":"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3","license":"MIT"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.nnpragma solidity ^0.8.20;nn/**n * @dev Library for reading and writing primitive types to specific storage slots.n *n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.n * This library helps with reading and writing to such slots without the need for inline assembly.n *n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.n *n * Example usage to set ERC1967 implementation slot:n * ```solidityn * contract ERC1967 {n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;n *n *     function _getImplementation() internal view returns (address) {n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;n *     }n *n *     function _setImplementation(address newImplementation) internal {n *         require(newImplementation.code.length > 0);n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;n *     }n * }n * ```n */nlibrary StorageSlot {n    struct AddressSlot {n        address value;n    }nn    struct BooleanSlot {n        bool value;n    }nn    struct Bytes32Slot {n        bytes32 value;n    }nn    struct Uint256Slot {n        uint256 value;n    }nn    struct StringSlot {n        string value;n    }nn    struct BytesSlot {n        bytes value;n    }nn    /**n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.n     */n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := slotn        }n    }nn    /**n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.n     */n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := slotn        }n    }nn    /**n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.n     */n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := slotn        }n    }nn    /**n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.n     */n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := slotn        }n    }nn    /**n     * @dev Returns an `StringSlot` with member `value` located at `slot`.n     */n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := slotn        }n    }nn    /**n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.n     */n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := store.slotn        }n    }nn    /**n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.n     */n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := slotn        }n    }nn    /**n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.n     */n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {n        /// @solidity memory-safe-assemblyn        assembly {n            r.slot := store.slotn        }n    }n}n","keccak256":"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418","license":"MIT"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)nnpragma solidity ^0.8.20;nnimport {Math} from "./math/Math.sol";nimport {SignedMath} from "./math/SignedMath.sol";nn/**n * @dev String operations.n */nlibrary Strings {n    bytes16 private constant HEX_DIGITS = "0123456789abcdef";n    uint8 private constant ADDRESS_LENGTH = 20;nn    /**n     * @dev The `value` string doesn't fit in the specified `length`.n     */n    error StringsInsufficientHexLength(uint256 value, uint256 length);nn    /**n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.n     */n    function toString(uint256 value) internal pure returns (string memory) {n        unchecked {n            uint256 length = Math.log10(value) + 1;n            string memory buffer = new string(length);n            uint256 ptr;n            /// @solidity memory-safe-assemblyn            assembly {n                ptr := add(buffer, add(32, length))n            }n            while (true) {n                ptr--;n                /// @solidity memory-safe-assemblyn                assembly {n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))n                }n                value /= 10;n                if (value == 0) break;n            }n            return buffer;n        }n    }nn    /**n     * @dev Converts a `int256` to its ASCII `string` decimal representation.n     */n    function toStringSigned(int256 value) internal pure returns (string memory) {n        return string.concat(value < 0 ? "-" : "", toString(SignedMath.abs(value)));n    }nn    /**n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.n     */n    function toHexString(uint256 value) internal pure returns (string memory) {n        unchecked {n            return toHexString(value, Math.log256(value) + 1);n        }n    }nn    /**n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.n     */n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {n        uint256 localValue = value;n        bytes memory buffer = new bytes(2 * length + 2);n        buffer[0] = "0";n        buffer[1] = "x";n        for (uint256 i = 2 * length + 1; i > 1; --i) {n            buffer[i] = HEX_DIGITS[localValue & 0xf];n            localValue >>= 4;n        }n        if (localValue != 0) {n            revert StringsInsufficientHexLength(value, length);n        }n        return string(buffer);n    }nn    /**n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimaln     * representation.n     */n    function toHexString(address addr) internal pure returns (string memory) {n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);n    }nn    /**n     * @dev Returns true if the two strings are equal.n     */n    function equal(string memory a, string memory b) internal pure returns (bool) {n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));n    }n}n","keccak256":"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792","license":"MIT"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)nnpragma solidity ^0.8.20;nnimport {IERC165} from "./IERC165.sol";nn/**n * @dev Implementation of the {IERC165} interface.n *n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to checkn * for the additional interface id that will be supported. For example:n *n * ```solidityn * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);n * }n * ```n */nabstract contract ERC165 is IERC165 {n    /**n     * @dev See {IERC165-supportsInterface}.n     */n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {n        return interfaceId == type(IERC165).interfaceId;n    }n}n","keccak256":"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133","license":"MIT"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)nnpragma solidity ^0.8.20;nn/**n * @dev Interface of the ERC165 standard, as defined in then * https://eips.ethereum.org/EIPS/eip-165[EIP].n *n * Implementers can declare support of contract interfaces, which can then ben * queried by others ({ERC165Checker}).n *n * For an implementation, see {ERC165}.n */ninterface IERC165 {n    /**n     * @dev Returns true if this contract implements the interface defined byn     * `interfaceId`. See the correspondingn     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]n     * to learn more about how these ids are created.n     *n     * This function call must use less than 30 000 gas.n     */n    function supportsInterface(bytes4 interfaceId) external view returns (bool);n}n","keccak256":"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b","license":"MIT"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)nnpragma solidity ^0.8.20;nn/**n * @dev Standard math utilities missing in the Solidity language.n */nlibrary Math {n    /**n     * @dev Muldiv operation overflow.n     */n    error MathOverflowedMulDiv();nn    enum Rounding {n        Floor, // Toward negative infinityn        Ceil, // Toward positive infinityn        Trunc, // Toward zeron        Expand // Away from zeron    }nn    /**n     * @dev Returns the addition of two unsigned integers, with an overflow flag.n     */n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {n        unchecked {n            uint256 c = a + b;n            if (c < a) return (false, 0);n            return (true, c);n        }n    }nn    /**n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.n     */n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {n        unchecked {n            if (b > a) return (false, 0);n            return (true, a - b);n        }n    }nn    /**n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.n     */n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {n        unchecked {n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but then            // benefit is lost if 'b' is also tested.n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522n            if (a == 0) return (true, 0);n            uint256 c = a * b;n            if (c / a != b) return (false, 0);n            return (true, c);n        }n    }nn    /**n     * @dev Returns the division of two unsigned integers, with a division by zero flag.n     */n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {n        unchecked {n            if (b == 0) return (false, 0);n            return (true, a / b);n        }n    }nn    /**n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.n     */n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {n        unchecked {n            if (b == 0) return (false, 0);n            return (true, a % b);n        }n    }nn    /**n     * @dev Returns the largest of two numbers.n     */n    function max(uint256 a, uint256 b) internal pure returns (uint256) {n        return a > b ? a : b;n    }nn    /**n     * @dev Returns the smallest of two numbers.n     */n    function min(uint256 a, uint256 b) internal pure returns (uint256) {n        return a < b ? a : b;n    }nn    /**n     * @dev Returns the average of two numbers. The result is rounded towardsn     * zero.n     */n    function average(uint256 a, uint256 b) internal pure returns (uint256) {n        // (a + b) / 2 can overflow.n        return (a & b) + (a ^ b) / 2;n    }nn    /**n     * @dev Returns the ceiling of the division of two numbers.n     *n     * This differs from standard division with `/` in that it rounds towards infinity insteadn     * of rounding towards zero.n     */n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {n        if (b == 0) {n            // Guarantee the same behavior as in a regular Solidity division.n            return a / b;n        }nn        // (a + b - 1) / b can overflow on addition, so we distribute.n        return a == 0 ? 0 : (a - 1) / b + 1;n    }nn    /**n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 orn     * denominator == 0.n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits byn     * Uniswap Labs also under MIT license.n     */n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {n        unchecked {n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then usen            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256n            // variables such that product = prod1 * 2^256 + prod0.n            uint256 prod0 = x * y; // Least significant 256 bits of the productn            uint256 prod1; // Most significant 256 bits of the productn            assembly {n                let mm := mulmod(x, y, not(0))n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))n            }nn            // Handle non-overflow cases, 256 by 256 division.n            if (prod1 == 0) {n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.n                // The surrounding unchecked block does not change this fact.n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.n                return prod0 / denominator;n            }nn            // Make sure the result is less than 2^256. Also prevents denominator == 0.n            if (denominator <= prod1) {n                revert MathOverflowedMulDiv();n            }nn            ///////////////////////////////////////////////n            // 512 by 256 division.n            ///////////////////////////////////////////////nn            // Make division exact by subtracting the remainder from [prod1 prod0].n            uint256 remainder;n            assembly {n                // Compute remainder using mulmod.n                remainder := mulmod(x, y, denominator)nn                // Subtract 256 bit number from 512 bit number.n                prod1 := sub(prod1, gt(remainder, prod0))n                prod0 := sub(prod0, remainder)n            }nn            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.nn            uint256 twos = denominator & (0 - denominator);n            assembly {n                // Divide denominator by twos.n                denominator := div(denominator, twos)nn                // Divide [prod1 prod0] by twos.n                prod0 := div(prod0, twos)nn                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.n                twos := add(div(sub(0, twos), twos), 1)n            }nn            // Shift in bits from prod1 into prod0.n            prod0 |= prod1 * twos;nn            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 suchn            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct forn            // four bits. That is, denominator * inv = 1 mod 2^4.n            uint256 inverse = (3 * denominator) ^ 2;nn            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this alson            // works in modular arithmetic, doubling the correct bits in each step.n            inverse *= 2 - denominator * inverse; // inverse mod 2^8n            inverse *= 2 - denominator * inverse; // inverse mod 2^16n            inverse *= 2 - denominator * inverse; // inverse mod 2^32n            inverse *= 2 - denominator * inverse; // inverse mod 2^64n            inverse *= 2 - denominator * inverse; // inverse mod 2^128n            inverse *= 2 - denominator * inverse; // inverse mod 2^256nn            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome isn            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1n            // is no longer required.n            result = prod0 * inverse;n            return result;n        }n    }nn    /**n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.n     */n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {n        uint256 result = mulDiv(x, y, denominator);n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {n            result += 1;n        }n        return result;n    }nn    /**n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is roundedn     * towards zero.n     *n     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).n     */n    function sqrt(uint256 a) internal pure returns (uint256) {n        if (a == 0) {n            return 0;n        }nn        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.n        //n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we haven        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.n        //n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`n        // u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`n        // u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`n        //n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.n        uint256 result = 1 << (log2(a) >> 1);nn        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles atn        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precisionn        // into the expected uint128 result.n        unchecked {n            result = (result + a / result) >> 1;n            result = (result + a / result) >> 1;n            result = (result + a / result) >> 1;n            result = (result + a / result) >> 1;n            result = (result + a / result) >> 1;n            result = (result + a / result) >> 1;n            result = (result + a / result) >> 1;n            return min(result, a / result);n        }n    }nn    /**n     * @notice Calculates sqrt(a), following the selected rounding direction.n     */n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {n        unchecked {n            uint256 result = sqrt(a);n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);n        }n    }nn    /**n     * @dev Return the log in base 2 of a positive value rounded towards zero.n     * Returns 0 if given 0.n     */n    function log2(uint256 value) internal pure returns (uint256) {n        uint256 result = 0;n        unchecked {n            if (value >> 128 > 0) {n                value >>= 128;n                result += 128;n            }n            if (value >> 64 > 0) {n                value >>= 64;n                result += 64;n            }n            if (value >> 32 > 0) {n                value >>= 32;n                result += 32;n            }n            if (value >> 16 > 0) {n                value >>= 16;n                result += 16;n            }n            if (value >> 8 > 0) {n                value >>= 8;n                result += 8;n            }n            if (value >> 4 > 0) {n                value >>= 4;n                result += 4;n            }n            if (value >> 2 > 0) {n                value >>= 2;n                result += 2;n            }n            if (value >> 1 > 0) {n                result += 1;n            }n        }n        return result;n    }nn    /**n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.n     * Returns 0 if given 0.n     */n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {n        unchecked {n            uint256 result = log2(value);n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);n        }n    }nn    /**n     * @dev Return the log in base 10 of a positive value rounded towards zero.n     * Returns 0 if given 0.n     */n    function log10(uint256 value) internal pure returns (uint256) {n        uint256 result = 0;n        unchecked {n            if (value >= 10 ** 64) {n                value /= 10 ** 64;n                result += 64;n            }n            if (value >= 10 ** 32) {n                value /= 10 ** 32;n                result += 32;n            }n            if (value >= 10 ** 16) {n                value /= 10 ** 16;n                result += 16;n            }n            if (value >= 10 ** 8) {n                value /= 10 ** 8;n                result += 8;n            }n            if (value >= 10 ** 4) {n                value /= 10 ** 4;n                result += 4;n            }n            if (value >= 10 ** 2) {n                value /= 10 ** 2;n                result += 2;n            }n            if (value >= 10 ** 1) {n                result += 1;n            }n        }n        return result;n    }nn    /**n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.n     * Returns 0 if given 0.n     */n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {n        unchecked {n            uint256 result = log10(value);n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);n        }n    }nn    /**n     * @dev Return the log in base 256 of a positive value rounded towards zero.n     * Returns 0 if given 0.n     *n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.n     */n    function log256(uint256 value) internal pure returns (uint256) {n        uint256 result = 0;n        unchecked {n            if (value >> 128 > 0) {n                value >>= 128;n                result += 16;n            }n            if (value >> 64 > 0) {n                value >>= 64;n                result += 8;n            }n            if (value >> 32 > 0) {n                value >>= 32;n                result += 4;n            }n            if (value >> 16 > 0) {n                value >>= 16;n                result += 2;n            }n            if (value >> 8 > 0) {n                result += 1;n            }n        }n        return result;n    }nn    /**n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.n     * Returns 0 if given 0.n     */n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {n        unchecked {n            uint256 result = log256(value);n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);n        }n    }nn    /**n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.n     */n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {n        return uint8(rounding) % 2 == 1;n    }n}n","keccak256":"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d","license":"MIT"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MITn// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)nnpragma solidity ^0.8.20;nn/**n * @dev Standard signed math utilities missing in the Solidity language.n */nlibrary SignedMath {n    /**n     * @dev Returns the largest of two signed numbers.n     */n    function max(int256 a, int256 b) internal pure returns (int256) {n        return a > b ? a : b;n    }nn    /**n     * @dev Returns the smallest of two signed numbers.n     */n    function min(int256 a, int256 b) internal pure returns (int256) {n        return a < b ? a : b;n    }nn    /**n     * @dev Returns the average of two signed numbers without overflow.n     * The result is rounded towards zero.n     */n    function average(int256 a, int256 b) internal pure returns (int256) {n        // Formula from the book "Hacker's Delight"n        int256 x = (a & b) + ((a ^ b) >> 1);n        return x + (int256(uint256(x) >> 255) & (a ^ b));n    }nn    /**n     * @dev Returns the absolute unsigned value of a signed value.n     */n    function abs(int256 n) internal pure returns (uint256) {n        unchecked {n            // must be unchecked in order to support `n = type(int256).min`n            return uint256(n >= 0 ? n : -n);n        }n    }n}n","keccak256":"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72","license":"MIT"},"contracts/LotteryGame.sol":{"content":"// SPDX-License-Identifier: MITnpragma solidity ^0.8.18;nnimport "@openzeppelin/contracts/access/Ownable.sol";nimport "./LotterySetting.sol";nimport "./LotteryGameNFTCard.sol";nncontract LotteryGame is Ownable {n    LotteryGameNFTCard public nftContract; // Reference to the NFT contract (ERC-1155)n    LotterySetting public setting;         // Reference to the LotterySetting contractnn    // Game statesn    enum GameState { Started, Finished, Calculating, Rewarded }nn    // Struct to store each player's NFT usage in a gamen    struct PlayerEntry {n        uint256[] tokenIds; // Array of NFT token IDs used by the playern        uint256[] counts;   // Array of counts for each token IDn    }nn    struct Game {n        address[] players;                              // List of playersn        mapping(address => bool) hasEntered;            // Track if user has enteredn        mapping(address => PlayerEntry) playerEntries;  // Stores NFT details per playern        mapping(address => uint256) ticketCounts;       // Stores ticketCount per player for small game weightingn        GameState state;                                // Game staten        uint256 jackpotSize;                            // Target jackpot size to finish the gamen        uint256 currentSize;                            // Current ETH balance for this gamen    }nn    mapping(uint256 => Game) public games; // Game Index => Gamen    mapping(uint256 => bool) public activeGameIndices; // Mapping for active game indicesn    uint256 public megaJackpot;            // Accumulated Mega Jackpot fundsn    address public teamWallet;             // Team/treasury walletn    uint256 private randomSeed;            // Private seed for randomnessn    uint256 public gameCounter;            // Counter for total games creatednn    // Store investor list across all gamesn    address[] public investorList;n    // Tracks cumulative tickets per user for mega jackpot weightingn    mapping(address => uint256) public totalUserTicket;n    // Tracks unique investors to prevent duplicate investorList pushesn    mapping(address => bool) private hasInvested;nn    // Eventsn    event TicketPurchased(address indexed player, uint256 gameIndex, uint256[] tokenIds, uint256 tickets);n    event GameStateChanged(uint256 gameIndex, GameState state);n    event GameStarted(uint256 gameIndex);n    event GameEnded(uint256 gameIndex, address indexed winner, uint256 prize);n    event GameWinners(uint256 gameIndex, address indexed winner, uint256 prize);n    event MegaJackpotWon(address indexed winner, uint256 amount);n    event MegaJackpotContribution(uint256 gameIndex, uint256 contribution);nn    /**n     * @dev Constructor to initialize the LotteryGame contract.n     * @param _nftContract Address of the LotteryGameNFTCard contract (ERC-1155).n     * @param _settingContract Address of the LotterySetting contract for configuration.n     * @param _teamWallet Address of the team/treasury wallet to receive team share.n     */n    constructor(address _nftContract, address _settingContract, address _teamWallet) Ownable(msg.sender) {n        require(_nftContract != address(0) && _settingContract != address(0) && _teamWallet != address(0), "Invalid contract addresses");n        nftContract = LotteryGameNFTCard(_nftContract);n        setting = LotterySetting(_settingContract);n        teamWallet = _teamWallet;n        randomSeed = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao)));n        gameCounter = 0;n    }nn    receive() external payable {}nn    /**n     * @dev Admin function to start a new game.n     * @param jackpotSize The target jackpot size for the game in wei.n     */n    function startGame(uint256 jackpotSize) external onlyOwner {n        require(jackpotSize >= setting.MIN_JACKPOT_SIZE(), "Jackpot size too small");n        require(jackpotSize <= setting.MAX_JACKPOT_SIZE(), "Jackpot size too large");nn        gameCounter++;n        uint256 gameIndex = gameCounter;nn        require(games[gameIndex].state == GameState.Rewarded || games[gameIndex].state == GameState(0), "Game index already in use");nn        uint256 contribution = (jackpotSize * setting.TAX_PERCENT() * setting.MEGA_JACKPOT_FEE()) / (setting.SCALE() * setting.SCALE());n        require(megaJackpot + contribution <= setting.MAX_MEGA_JACKPOT(), "Mega Jackpot exceeds max limit");n        megaJackpot += contribution;nn        Game storage newGame = games[gameIndex];n        newGame.state = GameState.Started;n        newGame.jackpotSize = jackpotSize;n        newGame.currentSize = 0;n        activeGameIndices[gameIndex] = true;nn        emit GameStarted(gameIndex);n        emit GameStateChanged(gameIndex, GameState.Started);n        emit MegaJackpotContribution(gameIndex, contribution);n    }nn    /**n     * @dev Allows users to buy tickets for a game using NFTs for a boost.n     * @param gameIndex The index of the game to participate in.n     * @param tokenIds Array of token IDs (card types) to use for the boost.n     * @param counts Array of counts corresponding to each token ID (number of tokens to use).n     * @param userRandom A user-provided random number to contribute to randomness.n     */n    function buyTickets(uint256 gameIndex, uint256[] calldata tokenIds, uint256[] calldata counts, uint256 userRandom) external payable {n        // Combined checks to save ~600 gas (2 requires vs. 4)n        require(gameIndex <= gameCounter && games[gameIndex].state == GameState.Started, "Invalid game index or state");n        require(tokenIds.length == counts.length && !games[gameIndex].hasEntered[msg.sender] && msg.value == setting.ENTRY_PRICE(), "Invalid input or entry");nn        // Simplified random seed to save ~500 gas and improve securityn        randomSeed = uint256(keccak256(abi.encodePacked(randomSeed, userRandom)));nn        // Calculate boosted tickets (10u2013500+)n        uint256 ticketCount = nftContract.getBoost(msg.sender, tokenIds, counts);n        if (ticketCount == 0) {n            ticketCount = 1;n        }nn        // Cache storage to save ~4,800 gas (6 SLOADs at 800 gas each)n        Game storage game = games[gameIndex];n        address[] storage players = game.players;n        mapping(address => PlayerEntry) storage playerEntries = game.playerEntries;n        mapping(address => bool) storage hasEntered = game.hasEntered;n        mapping(address => uint256) storage ticketCounts = game.ticketCounts;n        uint256 currentSize = game.currentSize;nn        // Update game state for small gamen        playerEntries[msg.sender] = PlayerEntry(tokenIds, counts);n        ticketCounts[msg.sender] = ticketCount; // Store for endGame weighting (20,000 gas)n        players.push(msg.sender); // 25,000 gasn        hasEntered[msg.sender] = true; // 20,000 gasn        currentSize += msg.value;nn        if (tokenIds.length > 0) {n            nftContract.batchLockCards(msg.sender, tokenIds, counts); // ~50,000 gasn        }nn        // Single push to investorList if new investor (25,000 gas) and update totalUserTicket (5,000u201320,000 gas)n        // Saves (ticketCount - 1) u00d7 25,000 gas vs. looping (e.g., 4,975,000 gas for ticketCount = 200)n        if (!hasInvested[msg.sender]) {n            investorList.push(msg.sender);n            hasInvested[msg.sender] = true; // 20,000 gas (new) or 5,000 gas (update)n        }n        totalUserTicket[msg.sender] += ticketCount;nn        // Update storagen        game.currentSize = currentSize;nn        emit TicketPurchased(msg.sender, gameIndex, tokenIds, ticketCount); // ~10,000 gasnn        if (currentSize >= game.jackpotSize) {n            game.state = GameState.Finished;n            emit GameStateChanged(gameIndex, GameState.Finished);n        }n    }nn    /**n     * @dev Internal function to end a game and distribute rewards.n     * @param gameIndex The index of the game to end.n     */n    function endGame(uint256 gameIndex) internal {n        Game storage game = games[gameIndex];n        game.state = GameState.Calculating;n        emit GameStateChanged(gameIndex, GameState.Calculating);nn        uint256 random1 = uint256(keccak256(abi.encodePacked(randomSeed, block.number)));n        uint256 random2 = uint256(keccak256(abi.encodePacked(randomSeed, random1)));nn        // Weighted random selection using ticketCounts for small gamen        uint256 totalTickets = 0;n        for (uint256 i = 0; i < game.players.length; i++) {n            totalTickets += game.ticketCounts[game.players[i]];n        }n        uint256 winnerIndex = random1 % totalTickets;n        address winner;n        uint256 currentTickets = 0;n        for (uint256 i = 0; i < game.players.length; i++) {n            address player = game.players[i];n            currentTickets += game.ticketCounts[player];n            if (winnerIndex < currentTickets) {n                winner = player;n                break;n            }n        }nn        // Unlock NFTs for all unique playersn        for (uint256 i = 0; i < game.players.length; i++) {n            address player = game.players[i];n            PlayerEntry storage entry = game.playerEntries[player];n            if (entry.tokenIds.length > 0) {n                nftContract.batchUnlockCards(player, entry.tokenIds, entry.counts);n            }n        }nn        uint256 prizePool = game.currentSize;n        uint256 winnerPrize = (prizePool * setting.MAIN_REWARD_PERCENT()) / setting.SCALE();n        uint256 randomTenPrize = (prizePool * setting.RANDOM_TEN_REWARD_PERCENT()) / setting.SCALE();n        uint256 tax = (prizePool * setting.TAX_PERCENT()) / setting.SCALE();n        uint256 teamShare = (tax * setting.TEAM_SHARE_PERCENT()) / setting.SCALE();nn        payable(winner).transfer(winnerPrize);n        distributeToRandomTen(random2, randomTenPrize, gameIndex);n        payable(teamWallet).transfer(teamShare);nn        game.state = GameState.Rewarded;n        emit GameStateChanged(gameIndex, GameState.Rewarded);n        emit GameEnded(gameIndex, winner, winnerPrize);nn        // Mark game as inactiven        activeGameIndices[gameIndex] = false;n    }nn    /**n     * @dev Internal function to distribute 10% of the prize pool to 10 random users.n     * @param random A random number for selecting winners.n     * @param amount The total amount to distribute (10% of the prize pool).n     * @param gameIndex The index of the game.n     */n    function distributeToRandomTen(uint256 random, uint256 amount, uint256 gameIndex) internal {n        Game storage game = games[gameIndex];n        if (game.players.length == 0) return;n        uint256 winAmount = amount / 10;n        for (uint256 i = 0; i < 10 && i < game.players.length; i++) {n            uint256 randomDataNumber = uint256(keccak256(abi.encodePacked(random, i)));n            uint256 index = randomDataNumber % game.players.length;n            address winnerAddress = game.players[index];n            payable(winnerAddress).transfer(winAmount);n            emit GameWinners(gameIndex, winnerAddress, winAmount);n        }n    }nn    /**n     * @dev Admin function to trigger reward calculation and distribution for a game.n     * @param gameIndex The index of the game to reward.n     */n    function reward(uint256 gameIndex) external onlyOwner {n        require(gameIndex <= gameCounter, "Invalid game index");n        Game storage game = games[gameIndex];n        require(game.state == GameState.Finished, "Game not in Finished state");n        endGame(gameIndex);n    }nn    /**n     * @dev Admin function to refresh the Mega Jackpot and distribute the reward.n     */n    function refreshMegaJackpot() external onlyOwner {n        require(megaJackpot >= setting.MAX_MEGA_JACKPOT(), "Mega Jackpot or investors invalid");n        bool allGamesEnded = true;n        for (uint256 i = 1; i <= gameCounter; i++) {n            if (activeGameIndices[i]) {n                allGamesEnded = false;n                break;n            }n        }n        require(allGamesEnded, "All games must be ended");nn        // Weighted random selection using totalUserTicketn        uint256 totalTickets = 0;n        for (uint256 i = 0; i < investorList.length; i++) {n            totalTickets += totalUserTicket[investorList[i]];n        }n        require(totalTickets > 0, "No tickets purchased");nn        uint256 random = uint256(keccak256(abi.encodePacked(randomSeed, block.timestamp)));n        uint256 winnerIndex = random % totalTickets;n        address winner;n        uint256 currentTickets = 0;n        for (uint256 i = 0; i < investorList.length; i++) {n            address player = investorList[i];n            currentTickets += totalUserTicket[player];n            if (winnerIndex < currentTickets) {n                winner = player;n                break;n            }n        }nn        uint256 jackpotAmount = megaJackpot;n        megaJackpot = 0;n        payable(winner).transfer(jackpotAmount);nn        // Reset for gas refunds (~2,700,000 gas for 100 investors)n        for (uint256 i = 0; i < investorList.length; i++) {n            totalUserTicket[investorList[i]] = 0; // Zeroing for max refundsn            hasInvested[investorList[i]] = false; // Reset investor trackingn        }n        delete investorList;nn        emit MegaJackpotWon(winner, jackpotAmount);n    }nn    /**n     * @dev Admin function to set teamwallet address.n     */n    function setTeamWallet(address _teamwallet) external onlyOwner {n        require(_teamwallet != address(0), "Setting Invalid Address");n        teamWallet = _teamwallet;n    }nn    /**n     * @dev Admin function to withdraw all funds in case of an emergency.n     */n    function emergencyWithdraw() external onlyOwner {n        uint256 balance = address(this).balance;n        require(balance > 0, "No funds to withdraw");n        payable(owner()).transfer(balance);n    }nn    /**n     * @dev View function to get the number of tickets a player has in a game.n     * @param gameIndex The index of the game.n     * @param player The address of the player.n     * @return The number of tickets the player has.n     */n    function getTickets(uint256 gameIndex, address player) external view returns (uint256) {n        require(gameIndex <= gameCounter, "Invalid game index");n        return games[gameIndex].ticketCounts[player];n    }nn    /**n     * @dev View function to get a player's entry details (NFTs used) in a game.n     * @param gameIndex The index of the game.n     * @param player The address of the player.n     * @return tokenIds Array of token IDs used by the player.n     * @return counts Array of counts corresponding to each token ID.n     */n    function getPlayerEntry(uint256 gameIndex, address player) n        external n        view n        returns (uint256[] memory tokenIds, uint256[] memory counts) n    {n        require(gameIndex <= gameCounter, "Invalid game index");n        PlayerEntry storage entry = games[gameIndex].playerEntries[player];n        return (entry.tokenIds, entry.counts);n    }nn    /**n     * @dev View function to get the list of investors across all games.n     * @return An array of investor addresses.n     */n    function getInvestorList() external view returns (address[] memory) {n        return investorList;n    }nn    /**n     * @dev View function to get the indices of active games.n     * @return An array of active game indices.n     */n    function getActiveGameIndices() external view returns (uint256[] memory) {n        uint256 count = 0;n        for (uint256 i = 1; i <= gameCounter; i++) {n            if (activeGameIndices[i]) count++;n        }n        uint256[] memory indices = new uint256[](count);n        uint256 index = 0;n        for (uint256 i = 1; i <= gameCounter; i++) {n            if (activeGameIndices[i]) indices[index++] = i;n        }n        return indices;n    }nn    /**n     * @dev View function to get the current size (total ETH collected) of a game.n     * @param gameIndex The index of the game.n     * @return The current size of the game in wei.n     */n    function getGameCurrentSize(uint256 gameIndex) external view returns (uint256) {n        require(gameIndex <= gameCounter, "Invalid game index");n        return games[gameIndex].currentSize;n    }n}","keccak256":"0x81d182be73c82fce4139f66a1f469911f49f19c176003a7918949f130de4acce","license":"MIT"},"contracts/LotteryGameNFTCard.sol":{"content":"// SPDX-License-Identifier: MITnpragma solidity ^0.8.18;nnimport "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";nimport "@openzeppelin/contracts/access/Ownable.sol";nimport "@openzeppelin/contracts/utils/Strings.sol";nncontract LotteryGameNFTCard is ERC1155, Ownable {n    uint256 public constant NUM_CARD_TYPES = 6; // Total number of card typesn    uint256 public constant MAX_MINT_COUNT = 3; // Max count per cardn    uint256[] public cardPrices; // Prices for each card type in wein    uint256[] public boostValues; // Boost values for each card typen    address public lotteryGame; // Address of the LotteryGame contractn    string private _name; // Token namen    string private _symbol; // Token symboln    string private _baseURI; // Base URI for token metadatann    // Total supply limits for each card typen    uint256[] public totalSupplyLimits = [n        5,    // Diamondn        50,   // Platinumn        100,  // Goldn        200,  // Silvern        400,  // Bronzen        800   // Ironn    ];nn    // Mapping to track the total minted count for each card typen    mapping(uint256 => uint256) public mintedCounts;nn    // Mapping to track locked cards for each user and card typen    mapping(address => mapping(uint256 => uint256)) public lockedCards;nn    /**n     * @dev Constructor to initialize the LotteryGameNFTCard contract.n     * @param baseURI_ The base URI for token metadata.n     */n    constructor(string memory baseURI_) ERC1155(baseURI_) Ownable(msg.sender) {n        _name = "LotteryGameCard";n        _symbol = "LGCard";n        _baseURI = baseURI_;nn        // Initialize card prices (in wei)n        cardPrices = [n            0.5 ether,  // Diamondn            0.4 ether,  // Platinumn            0.3 ether,  // Goldn            0.2 ether,  // Silvern            0.1 ether,  // Bronzen            0.05 ether  // Ironn        ];nn        // Initialize boost values for each card typen        boostValues = [n            60,  // Diamondn            40,  // Platinumn            30,  // Goldn            20,  // Silvern            10,  // Bronzen            5    // Ironn        ];n    }nn    /**n     * @dev Returns the name of the token.n     * @return The name of the token.n     */n    function name() external view returns (string memory) {n        return _name;n    }nn    /**n     * @dev Returns the symbol of the token.n     * @return The symbol of the token.n     */n    function symbol() external view returns (string memory) {n        return _symbol;n    }nn    /**n     * @dev Returns the base URI for token metadata.n     * @return The base URI.n     */n    function baseURI() external view returns (string memory) {n        return _baseURI;n    }nn    /**n     * @dev Sets the base URI for token metadata (only callable by the owner).n     * @param newBaseURI The new base URI to set.n     */n    function setBaseURI(string memory newBaseURI) external onlyOwner {n        _baseURI = newBaseURI;n    }nn    /**n     * @dev Returns the URI for a specific token ID.n     * @param tokenId The ID of the token.n     * @return The full URI for the token, with .json extension.n     */n    function uri(uint256 tokenId) public view override returns (string memory) {n        require(tokenId < NUM_CARD_TYPES, "Invalid token ID");n        return string(abi.encodePacked(_baseURI, Strings.toString(tokenId), ".json"));n    }nn    /**n     * @dev Admin function to set the tokenPrice.n     * @param _tokenType The type of the token.n     * @param _price The price of the token.n     */n    function setTokenPrice(uint256 _price, uint256 _tokenType) external onlyOwner {n        require(_tokenType < NUM_CARD_TYPES, "Invalid address");n        cardPrices[_tokenType] = _price;n    }n    n    /**n     * @dev Admin function to set the LotteryGame contract address.n     * @param _lotteryGame The address of the LotteryGame contract.n     */n    function setLotteryGame(address _lotteryGame) external onlyOwner {n        require(_lotteryGame != address(0), "Invalid address");n        lotteryGame = _lotteryGame;n    }nn    /**n     * @dev Allows users to mint new NFT cards by paying the required price.n     * @param to The address to mint the cards to.n     * @param cardType The type of card to mint (0 to NUM_CARD_TYPES-1).n     * @param amount The number of cards to mint.n     */n    function mint(address to, uint256 cardType, uint256 amount) external payable {n        require(cardType < NUM_CARD_TYPES, "Invalid card type");n        require(amount > 0 && MAX_MINT_COUNT >= amount, "Amount must be greater than 0 and smaller than 3");n        require(msg.value >= cardPrices[cardType] * amount, "Insufficient payment");nn        // Check total supply limitn        uint256 newMintedCount = mintedCounts[cardType] + amount;n        require(newMintedCount <= totalSupplyLimits[cardType], "Exceeds total supply for this card type");nn        // Update minted countn        mintedCounts[cardType] = newMintedCount;nn        _mint(to, cardType, amount, "");n    }nn    /**n     * @dev Allows the owner to airdrop NFT cards to multiple users.n     * @param recipients Array of addresses to receive the cards.n     * @param cardType The type of card to airdrop (0 to NUM_CARD_TYPES-1).n     * @param amounts Array of amounts to airdrop to each recipient.n     */n    function airdrop(address[] calldata recipients, uint256 cardType, uint256[] calldata amounts) external onlyOwner {n        require(cardType < NUM_CARD_TYPES, "Invalid card type");n        require(recipients.length == amounts.length, "Recipients and amounts length mismatch");n        require(recipients.length > 0, "Must provide at least one recipient");nn        // Calculate total amount to airdropn        uint256 totalAmount = 0;n        for (uint256 i = 0; i < amounts.length; i++) {n            require(amounts[i] > 0, "Amount must be greater than 0");n            totalAmount += amounts[i];n        }nn        // Check total supply limitn        uint256 newMintedCount = mintedCounts[cardType] + totalAmount;n        require(newMintedCount <= totalSupplyLimits[cardType], "Exceeds total supply for this card type");nn        // Update minted countn        mintedCounts[cardType] = newMintedCount;nn        // Airdrop to each recipientn        for (uint256 i = 0; i < recipients.length; i++) {n            _mint(recipients[i], cardType, amounts[i], "");n        }n    }nn    // Modifier to restrict function calls to only the lotteryGame addressn    modifier onlyLotteryGame() {n        require(msg.sender == lotteryGame, "Only LotteryGame can call this function");n        _;n    }nn    // Batch lock multiple card types for a usern    function batchLockCards(address user, uint256[] calldata tokenIds, uint256[] calldata amounts) external onlyLotteryGame {n        require(tokenIds.length == amounts.length, "Token IDs and amounts length mismatch");nn        for (uint256 i = 0; i < tokenIds.length; i++) {n            uint256 cardType = tokenIds[i];n            uint256 amount = amounts[i];n            require(cardType < NUM_CARD_TYPES, "Invalid card type");n            require(amount > 0, "Amount must be greater than 0");nn            uint256 availableCards = balanceOf(user, cardType) - lockedCards[user][cardType];n            require(availableCards >= amount, "Not enough unlocked cards");nn            lockedCards[user][cardType] += amount;n        }n    }nn    // Batch unlock multiple card types for a usern    function batchUnlockCards(address user, uint256[] calldata tokenIds, uint256[] calldata amounts) external onlyLotteryGame {n        require(tokenIds.length == amounts.length, "Token IDs and amounts length mismatch");nn        for (uint256 i = 0; i < tokenIds.length; i++) {n            uint256 cardType = tokenIds[i];n            uint256 amount = amounts[i];n            require(cardType < NUM_CARD_TYPES, "Invalid card type");n            require(amount > 0, "Amount must be greater than 0");n            require(lockedCards[user][cardType] >= amount, "Not enough locked cards");nn            lockedCards[user][cardType] -= amount;n        }n    }nn    /**n     * @dev Calculates the total boost for a user based on the number of cards used.n     * @param user The address of the user.n     * @param tokenIds Array of token IDs (card types) to use for the boost.n     * @param counts Array of counts corresponding to each token ID (number of tokens to use).n     * @return The total boost value.n     */n    function getBoost(address user, uint256[] calldata tokenIds, uint256[] calldata counts) external view returns (uint256) {n        require(tokenIds.length == counts.length, "Token IDs and counts length mismatch");n        uint256 totalBoost = 0;nn        for (uint256 i = 0; i < tokenIds.length; i++) {n            uint256 cardType = tokenIds[i];n            uint256 count = counts[i];n            if (count == 0) continue; // Skip if count is 0n            require(cardType < NUM_CARD_TYPES, "Invalid card type");nn            uint256 availableCards = balanceOf(user, cardType) - lockedCards[user][cardType];n            require(availableCards >= count, "Not enough unlocked cards");nn            // Boost is calculated as boost value per card type multiplied by the number of cards usedn            totalBoost += boostValues[cardType] * count;n        }nn        return totalBoost;n    }nn    /**n     * @dev View function to get a user's total, locked, and unlocked balances for all card types.n     * @param user The address of the user.n     * @return totalBalances Array of total balances for each card type.n     * @return lockedBalances Array of locked balances for each card type.n     * @return unlockedBalances Array of unlocked balances for each card type.n     */n    function getUserBalances(address user) n        external n        view n        returns (n            uint256[] memory totalBalances, n            uint256[] memory lockedBalances, n            uint256[] memory unlockedBalancesn        ) n    {n        totalBalances = new uint256[](NUM_CARD_TYPES);n        lockedBalances = new uint256[](NUM_CARD_TYPES);n        unlockedBalances = new uint256[](NUM_CARD_TYPES);nn        for (uint256 i = 0; i < NUM_CARD_TYPES; i++) {n            totalBalances[i] = balanceOf(user, i);n            lockedBalances[i] = lockedCards[user][i];n            unlockedBalances[i] = totalBalances[i] - lockedBalances[i];n        }n    }nn    /**n     * @dev Overrides ERC-1155's safeTransferFrom to prevent transferring locked cards.n     * @param from The address transferring the tokens.n     * @param to The address receiving the tokens.n     * @param id The token ID (card type) to transfer.n     * @param amount The number of tokens to transfer.n     * @param data Additional data to pass to the receiver.n     */n    function safeTransferFrom(n        address from,n        address to,n        uint256 id,n        uint256 amount,n        bytes memory datan    ) public override {n        require(id < NUM_CARD_TYPES, "Invalid card type");n        uint256 availableCards = balanceOf(from, id) - lockedCards[from][id];n        require(availableCards >= amount, "Cannot transfer locked cards");nn        super.safeTransferFrom(from, to, id, amount, data);n    }nn    /**n     * @dev Overrides ERC-1155's safeBatchTransferFrom to prevent transferring locked cards.n     * @param from The address transferring the tokens.n     * @param to The address receiving the tokens.n     * @param ids Array of token IDs (card types) to transfer.n     * @param amounts Array of amounts corresponding to each token ID.n     * @param data Additional data to pass to the receiver.n     */n    function safeBatchTransferFrom(n        address from,n        address to,n        uint256[] memory ids,n        uint256[] memory amounts,n        bytes memory datan    ) public override {n        require(ids.length == amounts.length, "IDs and amounts length mismatch");nn        for (uint256 i = 0; i < ids.length; i++) {n            uint256 id = ids[i];n            uint256 amount = amounts[i];n            require(id < NUM_CARD_TYPES, "Invalid card type");n            uint256 availableCards = balanceOf(from, id) - lockedCards[from][id];n            require(availableCards >= amount, "Cannot transfer locked cards");n        }nn        super.safeBatchTransferFrom(from, to, ids, amounts, data);n    }nn    /**n     * @dev Admin function to withdraw all funds in the contract.n     */n    function withDraw() external onlyOwner {n        uint256 balance = address(this).balance;n        require(balance > 0, "No funds to withdraw");n        payable(owner()).transfer(balance);n    }n}","keccak256":"0xce53b5026d732b9ad86d0f9dbe5eee9b685f667e0c6172773e9298bfe5455b15","license":"MIT"},"contracts/LotterySetting.sol":{"content":"// SPDX-License-Identifier: MITnpragma solidity ^0.8.18;nnimport "@openzeppelin/contracts/access/Ownable.sol";nncontract LotterySetting is Ownable {n    uint256 public constant SCALE = 10000;nn    // Fee-related settingsn    uint256 public TAX_PERCENT = 1000; // 10% of prize pooln    uint256 public MEGA_JACKPOT_FEE = 5000; // 50% of taxn    uint256 public MAIN_REWARD_PERCENT = 8000; // 80% of prize pooln    uint256 public RANDOM_TEN_REWARD_PERCENT = 1000; // 10% of prize pooln    uint256 public TEAM_SHARE_PERCENT = 5000; // 50% of taxnn    // Game settingsn    uint256 public ENTRY_PRICE = 0.05 ether;n    uint256 public MIN_JACKPOT_SIZE = 1 ether;n    uint256 public MAX_JACKPOT_SIZE = 10 ether;n    uint256 public MAX_MEGA_JACKPOT = 100 ether;nn    constructor() Ownable(msg.sender) {}nn    // Combined setter for tax, main reward, and random ten reward percentagesn    function setRewardDistribution(n        uint256 _taxPercent,n        uint256 _mainRewardPercent,n        uint256 _randomTenRewardPercentn    ) external onlyOwner {n        require(_taxPercent <= SCALE, "Tax percent cannot exceed 100%");n        require(_mainRewardPercent <= SCALE, "Main reward percent cannot exceed 100%");n        require(_randomTenRewardPercent <= SCALE, "Random Ten reward percent cannot exceed 100%");n        require(n            _taxPercent + _mainRewardPercent + _randomTenRewardPercent <= SCALE,n            "Tax + Main + Random Ten cannot exceed 100%"n        );nn        TAX_PERCENT = _taxPercent;n        MAIN_REWARD_PERCENT = _mainRewardPercent;n        RANDOM_TEN_REWARD_PERCENT = _randomTenRewardPercent;n    }nn    // Setter functions for other fee-related settingsn    function setMegaJackpotFee(uint256 _megaJackpotFee) external onlyOwner {n        require(_megaJackpotFee <= SCALE, "Mega Jackpot fee cannot exceed 100%");n        MEGA_JACKPOT_FEE = _megaJackpotFee;n    }nn    function setTeamSharePercent(uint256 _teamSharePercent) external onlyOwner {n        require(_teamSharePercent <= SCALE, "Team share percent cannot exceed 100%");n        TEAM_SHARE_PERCENT = _teamSharePercent;n    }nn    // Setter functions for game settingsn    function setEntryPrice(uint256 _entryPrice) external onlyOwner {n        require(_entryPrice > 0, "Entry price must be greater than 0");n        ENTRY_PRICE = _entryPrice;n    }nn    function setJackpotSizeLimits(uint256 _minJackpotSize, uint256 _maxJackpotSize) external onlyOwner {n        require(_minJackpotSize > 0, "Min jackpot size must be greater than 0");n        require(_maxJackpotSize >= _minJackpotSize, "Max must be >= min");n        MIN_JACKPOT_SIZE = _minJackpotSize;n        MAX_JACKPOT_SIZE = _maxJackpotSize;n    }nn    function setMaxMegaJackpot(uint256 _maxMegaJackpot) external onlyOwner {n        require(_maxMegaJackpot > 0, "Max Mega Jackpot must be greater than 0");n        MAX_MEGA_JACKPOT = _maxMegaJackpot;n    }nn    // Getter function for jackpot size limitsn    function getJackpotSizeLimits() external view returns (uint256, uint256) {n        return (MIN_JACKPOT_SIZE, MAX_JACKPOT_SIZE);n    }n}","keccak256":"0x61d8a8374deb7d8099faa0b53dc24a0e1014cb7f8aa2c7b0deb8148eadd94495","license":"MIT"}},"version":1}